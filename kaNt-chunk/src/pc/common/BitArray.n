// Based off of:
// https://github.com/PrismarineJS/prismarine-chunk/blob/master/src/pc/common/BitArray.js

import json

let neededBits = imp "./neededBits.n"
let Math = imp "../../../../.modules/Math/math.n"

class pub BitArray  (dat:maybe[list[int]], capacity:int, bitsPerValue:int) {
	// Setup
	let mut data: list[int] = []

	if let yes(d) = dat {
		data = d
	} else {
		for (i in range(0, ((capacity * bitsPerValue).toFloat() / 64.0).ceil(), 1)) {
			data = data.append(0)
		}
	}

	let mut valueMask = (2^bitsPerValue).floor() - 1

	// Methods
	let pub get = (index:int) -> int {
		let bitIndex = index * bitsPerValue
		let startLongIndex = Math.shiftRight(bitIndex, 5)
		let startLong = data[startLongIndex] | 0
		let indexInStartLong = bitIndex && 31
		let mut result = Math.shiftRight(startLong, indexInStartLong)
		let endBitOffset = indexInStartLong + bitsPerValue
		if (endBitOffset > 32) {
			let endLong = data[startLongIndex + 1] | 0
			result = result | (endLong * (2^(32 - indexInStartLong)).floor())
		}
		return result & valueMask
	}

	let pub toJson = () -> str {
		return json.stringify(json.object(mapFrom([
			("data", json.array(data.filterMap((i: int) -> maybe[json.value] {
				return yes(json.number(i.toFloat()))
			}))),
			("capacity", json.number(capacity.toFloat())),
			("bitsPerValue", json.number(bitsPerValue.toFloat())),
			("valueMask", json.number(valueMask.toFloat())),
		])))
	}

	let pub setValueMask = (mask:int) -> () {
		valueMask = mask
	}

	let pub toArray = () -> list[int] {
		let mut array: list[int] = []
		for (i in range(0, capacity, 1)) {
			array = array.append(get(i))
		}
		return array
	}
}

let pub fromjson = (j:json.value) -> maybe[BitArray] {
	if let object(mapValue) = j {
		if let yes(number(capacity)) = mapValue["capacity"] {	
			if let yes(number(bitsPerValue)) = mapValue["bitsPerValue"] {
				if let yes(number(valueMask)) = mapValue["valueMask"] {		
					if let yes(array(data)) = mapValue["data"] {
						let arrayValue = BitArray(yes(data.filterMap((v:json.value) -> maybe[int] {
							if let number(i) = v {
								return yes(i.round())
							}
							return none
						})), capacity.round(), bitsPerValue.round())
						arrayValue.setValueMask(valueMask.round())
						return yes(arrayValue)
					}
				}
			}
		}
	}

	return none
}

let pub fromArray = (array:list[int], bitsPerValue:int) -> BitArray {
	let mut data: list[int] = []
	let mut curLong = 0
	let mut curBit = 0

	for (i in array) {
		curLong = curLong | (i * (2^curBit).floor())
		curBit = curBit + bitsPerValue
		if curBit > 32 {
			data = data.append(curLong && 4294967295)
			curBit = curBit - 32
			curLong = Math.shiftRight(i, bitsPerValue - curBit)
		}
	}

	if curBit > 0 {
		data = data.append(curLong)
	}

	let bitarray = BitArray(yes(data), array.len(), bitsPerValue)
	bitarray.setValueMask((2^bitsPerValue).floor() - 1)
	return bitarray
}